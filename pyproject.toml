[project]
name = "bm-tools"
description = "Bible modules tools"
authors = [{name = "David James McCorrie", email = "djmccorrie@gmail.com"}]
license = {text = "Apache-2.0"}
readme = "README.md"
requires-python = ">=3.12"
keywords = []
dynamic = ["version"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.13",
    "Topic :: Documentation",
    "Topic :: Software Development",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dependencies = [
    "pandas>=2.2.2",
    "jinja2>=3.1.3",
    "click>=8.1.8",
    "requests>=2.32.3",
    "logzero>=1.7.0",
]

[project.urls]
Homepage = "https://machshev.github.io/bible-modules"
Documentation = "https://machshev.github.io/bible-modules"
Changelog = "https://machshev.github.io/bible-modules/changelog"
Repository = "https://github.com/machshev/bible-modules"
Issues = "https://github.com/machshev/bible-modules/issues"
Discussions = "https://github.com/machshev/bible-modules/discussions"
Funding = "https://github.com/sponsors/machshev"

[project.scripts]
bm = "bm_tools.cli:main"

[project.optional-dependencies]
duty = ["duty>=0.10"]
ci = ["bm-tools[duty,docs,quality,security]"]
docs = [
    "markdown-callouts>=0.3",
    "markdown-exec>=1.7",
    "mkdocs>=1.5",
    "mkdocs-coverage>=1.0",
    "mkdocs-gen-files>=0.5",
    "mkdocs-git-committers-plugin-2>=1.2",
    "mkdocs-literate-nav>=0.6",
    "mkdocs-material>=9.4",
    "mkdocs-minify-plugin>=0.7",
    "mkdocstrings[python]>=0.23",
    "tomli>=2.0; python_version < '3.11'",
    "md-toc>=9.0.0",
]
maintain = [
    "git-changelog>=2.3",
]
debug = [
    "ipython>=9.4.0",
    "ipdb>=0.13.13",
]
quality = [
    "ruff>=0.0",
]
test = [
    "pytest>=7.4",
    "pytest-cov>=4.1",
    "pytest-randomly>=3.15",
    "pytest-xdist>=3.3",
    "pyhamcrest>=2.1.0",
]
typing = [
    "pyright>=1.1.381",
]
security = [
    "safety>=2.3",
]

# drop out ruff as it contains a rust binary that needs to be installed by the flake
nix = ["bm-tools[debug,duty,docs,test,maintain,typing,security]"]

[tool.pyright]
include = ["src"]
reportMissingImports = "error"
reportMissingTypeStubs = false
venv = ".venv"
executionEnvironments = [
    { root = "src" },
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "fixtures",
    "site",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

target-version = "py313"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["ALL"]

# Enable preview rules, but they must be selected explicitly
preview = true
explicit-preview-rules = true
extend-select = ["W391", "E303"]

allowed-confusables = ["âˆ’"]
ignore = [
    "D203", "D213", "COM812", "ISC001",
    "FIX", "TD",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

pydocstyle.convention = "google"
isort.known-first-party = ["bm_tools"]
flake8-tidy-imports.ban-relative-imports = "all"
flake8-quotes.docstring-quotes = "double"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 80

[tool.git-changelog]
bump = "auto"
convention = "angular"
in-place = true
output = "CHANGELOG.md"
parse-refs = false
parse-trailers = true
sections = ["build", "deps", "feat", "fix", "refactor"]
template = "keepachangelog"

[tool.pytest.ini_options]
addopts = "--cov=bm_tools --cov-report term-missing"

[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"
vcs = "git"
style = "semver"
